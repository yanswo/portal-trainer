// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CLIENT
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  PIX
  CREDIT_CARD
  BOLETO
}

enum VideoType {
  THEORY
  PRACTICE
  ASSESSMENT
}

enum AssessmentStatus {
  IN_PROGRESS
  SUBMITTED
  APPROVED
  REJECTED
}

enum BudgetStatus {
  RECEIVED
  IN_REVIEW
  SENT
  APPROVED
  DECLINED
}

enum EvidenceType {
  VIDEO
  DOCUMENT
  AUDIO
}

enum CertificationStatus {
  ISSUED
  PENDING
  REVOKED
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  password  String
  role      UserRole @default(CLIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile        Profile?
  enrollments    Enrollment[]
  supportTickets SupportTicket[]
  payments       Payment[]
  budgets        BudgetRequest[]
  assessments    Assessment[]
}

model Profile {
  id        String  @id @default(cuid())
  bio       String?
  avatarUrl String?
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id])
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String?
  price       Decimal
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  videos      Video[]
  modules     CourseModule[]
  enrollments Enrollment[]
  payments    Payment[]
  assessments Assessment[]
  }

model Video {
  id        String   @id @default(cuid())
  title     String
  url       String
  position  Int
  type      VideoType @default(THEORY)
  duration  Int?
  transcriptUrl String?
  resources Json?
  preview   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  moduleId String?
  module   CourseModule? @relation(fields: [moduleId], references: [id], onDelete: SetNull)
}

model CourseModule {
  id          String   @id @default(cuid())
  title       String
  description String?
  position    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  videos   Video[]
}

model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())

  user        User         @relation(fields: [userId], references: [id])
  course      Course       @relation(fields: [courseId], references: [id])
  payments    Payment[]
  assessments Assessment[]

  @@unique([userId, courseId])
}

model SupportTicket {
  id        String   @id @default(cuid())
  subject   String
  message   String
  status    String   @default("OPEN")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])
  messages SupportMessage[]
}

model Payment {
  id        String        @id @default(cuid())
  amount    Decimal
  status    PaymentStatus @default(PENDING)
  method    PaymentMethod
  reference String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  userId       String
  courseId     String
  enrollmentId String?

  user       User        @relation(fields: [userId], references: [id])
  course     Course      @relation(fields: [courseId], references: [id])
  enrollment Enrollment? @relation(fields: [enrollmentId], references: [id])
}

model BudgetRequest {
  id          String       @id @default(cuid())
  companyName String
  courseFocus String
  seats       Int
  status      BudgetStatus @default(RECEIVED)
  proposedFee Decimal?
  notes       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Assessment {
  id          String           @id @default(cuid())
  score       Float?
  status      AssessmentStatus @default(IN_PROGRESS)
  attempt     Int              @default(1)
  submittedAt DateTime?
  approvedAt  DateTime?
  feedback    String?

  userId       String
  courseId     String
  enrollmentId String

  user       User       @relation(fields: [userId], references: [id])
  course     Course     @relation(fields: [courseId], references: [id])
  enrollment Enrollment @relation(fields: [enrollmentId], references: [id])
  evidences  AssessmentEvidence[]
}

model AssessmentEvidence {
  id           String       @id @default(cuid())
  type         EvidenceType @default(VIDEO)
  url          String
  uploadedAt   DateTime     @default(now())
  assessmentId String
  assessment   Assessment   @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
}

model Certification {
  id           String               @id @default(cuid())
  status       CertificationStatus  @default(PENDING)
  issuedAt     DateTime?
  expiresAt    DateTime?
  documentUrl  String?
  enrollmentId String               @unique
  enrollment   Enrollment           @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
}

model SupportMessage {
  id        String   @id @default(cuid())
  body      String
  sender    String   @default("CLIENT")
  createdAt DateTime @default(now())

  ticketId String
  ticket   SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}

model BudgetItem {
  id          String   @id @default(cuid())
  description String
  quantity    Int      @default(1)
  unitPrice   Decimal
  budgetId    String
  budget      BudgetRequest @relation(fields: [budgetId], references: [id], onDelete: Cascade)
}
